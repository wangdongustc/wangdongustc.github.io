<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小叮当走失在1995</title>
  
  <subtitle>苟利国家生死以，岂因祸福避趋之</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://www.wangdongustc.com/blog/"/>
  <updated>2016-10-09T11:05:07.000Z</updated>
  <id>http://www.wangdongustc.com/blog/</id>
  
  <author>
    <name>Darren Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Chromebook 在 Fedora 24 下的温度控制</title>
    <link href="http://www.wangdongustc.com/blog/2016/10/09/tempture-and-battery-control-on-chromebook/"/>
    <id>http://www.wangdongustc.com/blog/2016/10/09/tempture-and-battery-control-on-chromebook/</id>
    <published>2016-10-09T09:31:16.000Z</published>
    <updated>2016-10-09T11:05:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-Linux-on-Chromebook-存在小Bug"><a href="#0x00-Linux-on-Chromebook-存在小Bug" class="headerlink" title="0x00 Linux on Chromebook: 存在小Bug"></a>0x00 Linux on Chromebook: 存在小Bug</h2><p>之前给 Dell CHromebook 7310 装了 linux Fedora 24 之后，开 Chrome 看视频就会莫名其妙的卡住，然后只能强制关机重启 （长按电源按键）。有一次看 Youtube 视频开了全屏，卡死之后长按电源按键也不再有用，包括合盖也不会熄屏，因此置之不理。第二天去看时候已经完全无法开机，充上电后开机 CPU 发烫，但无法进入 BIOS。无奈叫了 Dell 的保修服务，后维修单显示更换了 <strong>主板</strong>，<strong>网卡</strong>之后才可以开机。</p><p>根据一些网上的信息，貌似是在刷写 <a href="https://johnlewis.ie/" target="_blank" rel="noopener">SeaBios</a>时，系统掉电后某标志位复位导致系统丢失；拆机发现在 Fedora 24 下 Chromebook 的风扇一直不转，结合之前联系客服时他很自然的说是过热问题，之前问题的原因可能是散热不好导致主板多个模块烧坏。</p><h2 id="0x01-问题需求"><a href="#0x01-问题需求" class="headerlink" title="0x01 问题需求"></a>0x01 问题需求</h2><p>因此想到至少需要试着解决如下问题：</p><ol><li>电池耗尽 【想到可以保留一部分电量，在10%左右低电关机】</li><li>过热    【不容易解决，因为风扇确实不转，但可以在温度达到较高水平时提示关机】</li></ol><a id="more"></a><p>现有的电源管理会在电池电量较低时提示，但貌似不会采取措施；过热时候 CPU 会降频，但还是会产生较多热量。因此想通过一个程序实现如下功能：</p><ol><li>低电而未充电时，提示用户关机，两分钟内用户不关机也要强制关机；保护电脑不坏更重要。</li><li>主板/CPU 温度过高时提示用户关闭部分高消耗的程序以减小功耗，温度增长过快时提示用户检查正在运行的程序，温度达到某设定值强制快速关机以冷却电脑；保护电脑不坏更重要。</li><li>随机启动，随时醒目提示。</li></ol><h2 id="0x02-依赖小工具"><a href="#0x02-依赖小工具" class="headerlink" title="0x02 依赖小工具"></a>0x02 依赖小工具</h2><p>首先是获得电量/充电信息。可通过如下小软件 <strong>acpi</strong> 获得：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[xxx@localhost ~]$ acpi</span><br><span class="line">Battery 0: Discharging, 44%, 04:45:14 remaining</span><br></pre></td></tr></table></figure><p>其次是温度信息的获得，可读取传感器信息获得，软件 <strong>lm_sensors</strong> 提供此功能：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[xxx@localhost ~]$ sensors</span><br><span class="line">acpitz-virtual-0</span><br><span class="line">Adapter: Virtual device</span><br><span class="line">temp1:        +40.8°C  (crit = +104.0°C)</span><br><span class="line"></span><br><span class="line">pch_wildcat_point-virtual-0</span><br><span class="line">Adapter: Virtual device</span><br><span class="line">temp1:        -50.0°C </span><br><span class="line"></span><br><span class="line">coretemp-isa-0000</span><br><span class="line">Adapter: ISA adapter</span><br><span class="line">Physical id 0:  +47.0°C  (high = +105.0°C, crit = +105.0°C)</span><br><span class="line">Core 0:         +46.0°C  (high = +105.0°C, crit = +105.0°C)</span><br><span class="line">Core 1:         +46.0°C  (high = +105.0°C, crit = +105.0°C)</span><br></pre></td></tr></table></figure><p>其实 sensors 的输出应该包含风扇信息，而且一般通过 fancontrol 可以控制风扇行为，可通过 pwmconfig 来设置。但是在此电脑上没有显示出风扇的信息，而且 fancontrol 和 pwmconfig 相继报错，也就没办法去直接用小软件控制风扇了。</p><p>在 Fedora 24 上安装这些软件通过如下进行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[xxx@localhost ~]$ sudo dnf install acpi lm_sensors fancontrol pwmconfig</span><br></pre></td></tr></table></figure><h2 id="0x03-程序写法"><a href="#0x03-程序写法" class="headerlink" title="0x03 程序写法"></a>0x03 程序写法</h2><p>思路是直接读取 acpi 和 sensors 程序的输出结果，从中找到电池和温度信息。然后每隔一段时间读一次，实时监控电量和温度变化。</p><p>执行程序并读取输出结果由 popen() 函数完成：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">GetCommandOutput</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* command)</span> </span>&#123;</span><br><span class="line">FILE * fstream = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">char</span> buff[<span class="number">80</span>];</span><br><span class="line"><span class="built_in">string</span> output;</span><br><span class="line">fstream = popen(command, <span class="string">"r"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == fstream) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Command Execution Error!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">NULL</span> != fgets(buff, <span class="number">400</span>, fstream)) &#123;</span><br><span class="line">output = output.append(buff);</span><br><span class="line">&#125;</span><br><span class="line">pclose(fstream);</span><br><span class="line"><span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后字符串分析是直接通过 string 的 find() 等函数进行的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BatteryStatus* <span class="title">GetBatteryLevel</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">BatteryStatus *results = <span class="keyword">new</span> BatteryStatus();</span><br><span class="line"><span class="built_in">string</span> acpi_output = GetCommandOutput(<span class="string">"acpi"</span>);</span><br><span class="line"><span class="keyword">int</span> index = acpi_output.find_last_of(<span class="string">'%'</span>);</span><br><span class="line">results-&gt;percentage = atoi(acpi_output.substr(index<span class="number">-2</span>, index).c_str());</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">string</span>::npos == acpi_output.find(<span class="string">"Discharging"</span>, <span class="number">0</span>)) &#123;</span><br><span class="line">results-&gt;charging = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout &lt;&lt; results.percentage &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">return</span> results;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里通过检测百分比符号来得到电量信息，通过 “Discharging” 串来判断当前是否在充电。BatteryStatus 是一个类，包含是否在充电，电量百分比成员。<br>判断设备温度时，因为设备个数不一定，因此使用链表来储存设备和其温度信息。其结构为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeviceTemperature</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">string</span> device;</span><br><span class="line"><span class="keyword">float</span> temperature;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">DeviceTemperature* next_device;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>信息提取也是通过字符串分析得到的。</p><p>系统的通知是使用 libnotifymm 库来实现的，效果和方法如下：</p><p><img src="/blog/img/tempture-and-battery-control-on-chromebook/notify.png" alt="通知"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;libnotifymm.h&gt;</span><br><span class="line">#include &lt;libnotifymm/init.h&gt;</span><br><span class="line">#include &lt;libnotifymm/notify.h&gt;</span><br><span class="line">#include &lt;libnotifymm/notification.h&gt;</span><br><span class="line"></span><br><span class="line">// init the notifications.</span><br><span class="line">Notify::init(&quot;Aggressive Power Management&quot;);</span><br><span class="line">string title   = &quot;Aggressive Power Management&quot;;</span><br><span class="line">string message = &quot;电源和过热控制已启动&quot;;</span><br><span class="line">Notify::Notification notification(title, message);</span><br><span class="line">// urgency level: low/normal/critical</span><br><span class="line">notification.set_urgency(Notify::URGENCY_NORMAL);</span><br><span class="line">notification.show();</span><br><span class="line">// update current notification with new title and message</span><br><span class="line">notification.update(title, message);</span><br><span class="line">notification.close();</span><br></pre></td></tr></table></figure><p>main函数里面的逻辑就是在一个 while(1) 循环里面不断检查电量和温度，然后在适合的时间关机 （system(“init 0”);）。</p><p>完整的程序在 <a href="https://coding.net/" target="_blank" rel="noopener">coding.net</a> 上，项目地址为 <a href="https://coding.net/u/wangdong115/p/MakingWheel/git" target="_blank" rel="noopener">https://coding.net/u/wangdong115/p/MakingWheel/git</a>，在 tmpctrl 文件夹下。</p><p>另：在 eclipse 中做这个时候，编译链接时需要在设置里添加库的路径，然后通过 </p><p>C/C++ Build-&gt;Setting-&gt;Gcc c Compiler-&gt;Miscellaneous中添加$$(pkg-config –cflags glibmm-2.4 –cflags libnotifymm-1.0)<br>C/C++ Build-&gt;Setting-&gt;Gcc c Linker-&gt;Miscellaneous中添加$$(pkg-config –libs glibmm-2.4 –libs libnotifymm-1.0)</p><p>来让 g++ 在编译和链接的时候不懵逼。</p><h2 id="0x04-效果检验"><a href="#0x04-效果检验" class="headerlink" title="0x04 效果检验"></a>0x04 效果检验</h2><p>最终的效果就是在系统出现 电量低的时候进行倒计时关机，温度升高过快时提示，达到80度通知关闭部分程序，到了85度就直接半秒内关机。用 dex-autostart 将程序包装成 .desktop 程序，然后放入 ~/.config/autostart 文件夹，开机 login 进入 Gnome 后便可自动执行程序。</p><p>程序对温度的敏感度，警告和关机温度以及电量都可以在程序中定义。</p><p><img src="/blog/img/tempture-and-battery-control-on-chromebook/result.png" alt="通知"></p><h2 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h2><p>总而言之虽然程序完成了指定的功能，而且可以防止电量过低或者温度过高而导致不可修复的损坏，但整体的逻辑有一些问题。比如说程序主动关机可能损坏用户的当前工作(? 很好奇为什么 reboot, init 0 这样的程序都不需要 root 权限就可以执行)。</p><p>另外程序的性能也有问题，比如在一个循环内申请/释放内存（通过 new 和 delete 来创建和释放类），本来程序写成直接返回类，但那样看起来很危险；还有多处返回 string 类。很怕程序会内存泄露，毕竟会一直在后台运行，却不会做泄漏检查。想当程序员，还有很长的路要走啊。。 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-Linux-on-Chromebook-存在小Bug&quot;&gt;&lt;a href=&quot;#0x00-Linux-on-Chromebook-存在小Bug&quot; class=&quot;headerlink&quot; title=&quot;0x00 Linux on Chromebook: 存在小Bug&quot;&gt;&lt;/a&gt;0x00 Linux on Chromebook: 存在小Bug&lt;/h2&gt;&lt;p&gt;之前给 Dell CHromebook 7310 装了 linux Fedora 24 之后，开 Chrome 看视频就会莫名其妙的卡住，然后只能强制关机重启 （长按电源按键）。有一次看 Youtube 视频开了全屏，卡死之后长按电源按键也不再有用，包括合盖也不会熄屏，因此置之不理。第二天去看时候已经完全无法开机，充上电后开机 CPU 发烫，但无法进入 BIOS。无奈叫了 Dell 的保修服务，后维修单显示更换了 &lt;strong&gt;主板&lt;/strong&gt;，&lt;strong&gt;网卡&lt;/strong&gt;之后才可以开机。&lt;/p&gt;
&lt;p&gt;根据一些网上的信息，貌似是在刷写 &lt;a href=&quot;https://johnlewis.ie/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SeaBios&lt;/a&gt;时，系统掉电后某标志位复位导致系统丢失；拆机发现在 Fedora 24 下 Chromebook 的风扇一直不转，结合之前联系客服时他很自然的说是过热问题，之前问题的原因可能是散热不好导致主板多个模块烧坏。&lt;/p&gt;
&lt;h2 id=&quot;0x01-问题需求&quot;&gt;&lt;a href=&quot;#0x01-问题需求&quot; class=&quot;headerlink&quot; title=&quot;0x01 问题需求&quot;&gt;&lt;/a&gt;0x01 问题需求&lt;/h2&gt;&lt;p&gt;因此想到至少需要试着解决如下问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;电池耗尽 【想到可以保留一部分电量，在10%左右低电关机】&lt;/li&gt;
&lt;li&gt;过热    【不容易解决，因为风扇确实不转，但可以在温度达到较高水平时提示关机】&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="chromebook" scheme="http://www.wangdongustc.com/blog/tags/chromebook/"/>
    
  </entry>
  
  <entry>
    <title>screen tips program</title>
    <link href="http://www.wangdongustc.com/blog/2016/08/31/screen-tips-program/"/>
    <id>http://www.wangdongustc.com/blog/2016/08/31/screen-tips-program/</id>
    <published>2016-08-31T14:30:07.000Z</published>
    <updated>2016-09-01T02:53:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-家里的慢电脑"><a href="#0x00-家里的慢电脑" class="headerlink" title="0x00 家里的慢电脑"></a>0x00 家里的慢电脑</h2><h2 id="0x01-解决方法：屏幕提示"><a href="#0x01-解决方法：屏幕提示" class="headerlink" title="0x01 解决方法：屏幕提示"></a>0x01 解决方法：屏幕提示</h2><h2 id="0x02-技术实现"><a href="#0x02-技术实现" class="headerlink" title="0x02 技术实现"></a>0x02 技术实现</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-家里的慢电脑&quot;&gt;&lt;a href=&quot;#0x00-家里的慢电脑&quot; class=&quot;headerlink&quot; title=&quot;0x00 家里的慢电脑&quot;&gt;&lt;/a&gt;0x00 家里的慢电脑&lt;/h2&gt;&lt;h2 id=&quot;0x01-解决方法：屏幕提示&quot;&gt;&lt;a href=&quot;#0x0
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python with Visual Studio Code</title>
    <link href="http://www.wangdongustc.com/blog/2016/07/31/Python-with-Visual-Studio-Code/"/>
    <id>http://www.wangdongustc.com/blog/2016/07/31/Python-with-Visual-Studio-Code/</id>
    <published>2016-07-30T16:00:00.000Z</published>
    <updated>2016-08-01T01:41:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近发现 <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code</a> 真是巨硬的良心之作，不仅跨平台，而且十分的轻量级。虽说和 <a href="https://atom.io/" target="_blank" rel="noopener">Atom</a> 很像，但毕竟微软的作品，其用户体验真心不错。</p><p>如下内容的 Markdown 来自与<a href="https://code.visualstudio.com/docs/languages/python" target="_blank" rel="noopener">微软(R)的 VScode 帮助页面</a>的 <a href="https://github.com/Microsoft/vscode-docs/blob/master/docs/languages/python.md" target="_blank" rel="noopener">github 开源文件</a>，其协议为知识共享协议：<a href="http://creativecommons.org/licenses/by/3.0/us/legalcode" target="_blank" rel="noopener">Creative Commons Attribution 3.0 United States License</a>。</p><a id="more"></a><h1 id="Python-on-Visual-Studio-Code"><a href="#Python-on-Visual-Studio-Code" class="headerlink" title="Python on Visual Studio Code"></a>Python on Visual Studio Code</h1><p>Python is fully supported in Visual Studio Code through <a href="/docs/editor/extension-gallery.md">extensions</a>. Popular extensions in the <a href="https://marketplace.visualstudio.com" target="_blank" rel="noopener">Marketplace</a> provide code completion, linting, debugging, code formatting, snippets, and more. </p><blockquote><p><a href="/download">Download VS Code</a> - If you haven’t downloaded VS Code yet, quickly install for your platform (Windows, OS X, Linux). </p></blockquote><h2 id="Install-Python-Extension"><a href="#Install-Python-Extension" class="headerlink" title="Install Python Extension"></a>Install Python Extension</h2><p>VS Code is a fast editor and ships with only the basic features. Add Python language support to VS Code by installing one of the popular Python extensions. </p><ol><li>Select an extension. </li><li>Install the extension by typing <code>ext install</code> into the Command Palette <code>kb(workbench.action.showCommands)</code>. </li></ol><div class="marketplace-extensions-python"></div><blockquote><p>Tip: The extensions shown above are dynamically queried. Click on an extension tile above to read the description and reviews to decide which extension is best for you. See more in the <a href="https://marketplace.visualstudio.com/vscode" target="_blank" rel="noopener">Marketplace</a>.</p></blockquote><p>The examples in this document will use Don Jayamanne’s popular and full featured <a href="https://marketplace.visualstudio.com/items?itemName=donjayamanne.python" target="_blank" rel="noopener">Python Extension</a>.</p><h2 id="Code-Completion"><a href="#Code-Completion" class="headerlink" title="Code Completion"></a>Code Completion</h2><p>Python extensions support code completion and Intellisense. <a href="/docs/editor/editingevolved#_intellisense">Intellisense</a> is a general term for a number of features, including intelligent code completion (in-context method and variable suggestions) across all your files and for built-in and thirty-party modules. </p><p>Quickly see methods, class members, and documentation.</p><video id="python-code-completion-video" src="https://az754404.vo.msecnd.net/public/python-intellisense.mp4" poster="/images/python_python-intellisense-placeholder.png" autoplay loop controls muted></video><blockquote><p>Tip: Trigger code completion with <code>kb(editor.action.triggerSuggest)</code>.</p></blockquote><h2 id="Linting"><a href="#Linting" class="headerlink" title="Linting"></a>Linting</h2><p>Linting is the analysis of your Python code for potential errors. Use Visual Studio Code to quickly navigate to the errors and warnings in your code. </p><video id="python-linting-video" src="https://az754404.vo.msecnd.net/public/python-linting.mp4" poster="/images/python_python-linting-placeholder.png" autoplay loop controls muted></video><blockquote><p>Tip: <a href="https://marketplace.visualstudio.com/items?itemName=donjayamanne.python" target="_blank" rel="noopener">Don Jayamanne’s Python extension</a> gives you the option of using three different linters - <a href="https://www.pylint.org/" target="_blank" rel="noopener">Pylint</a>, <a href="https://pypi.python.org/pypi/pep8" target="_blank" rel="noopener">Pep8</a>, and <a href="https://flake8.readthedocs.io/en/latest/" target="_blank" rel="noopener">Flake8</a>. See the <a href="https://github.com/DonJayamanne/pythonVSCode/wiki/Linting" target="_blank" rel="noopener">wiki</a> for more details. </p></blockquote><h2 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a>Debugging</h2><p>No more <code>print</code> statement debugging! Set breakpoints, inspect data, and use the debug console. Debug a number of different type of Python applications, including multi-threaded, web, and remote applications. </p><video id="python-debugging-video" src="https://az754404.vo.msecnd.net/public/python-debugging.mp4" poster="/images/python_python-debugging-placeholder.png" autoplay loop controls muted></video><blockquote><p>Tip: Follow the instructions in the <a href="https://github.com/DonJayamanne/pythonVSCode/wiki/Debugging" target="_blank" rel="noopener">wiki</a> for getting started with debugging, including setting up your <code>launch.json</code> debugging configuration and troubleshooting common issues. </p></blockquote><blockquote><p>Tip: Read more about general information about debugging in Visual Studio Code in the <a href="/docs/editor/debugging.md">debugging document</a>. </p></blockquote><h2 id="Snippets"><a href="#Snippets" class="headerlink" title="Snippets"></a>Snippets</h2><p>Snippets will take productivity to the next level. You can configure <a href="/docs/customization/userdefinedsnippets.md">your own snippets</a> and use snippets provided by an extension. </p><video id="python-snippets-video" src="https://az754404.vo.msecnd.net/public/python-snippets.mp4" poster="/images/python_python-snippets-placeholder.png" autoplay loop controls muted></video><blockquote><p>Tip: Snippets appear in the same way as code completion <code>kb(editor.action.triggerSuggest)</code>. </p></blockquote><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>You will need an <a href="#_install-python-extension">extension</a> and <a href="https://www.python.org/downloads/" target="_blank" rel="noopener">Python</a> installed. Other dependencies are optional and depend on the features you want to use. Read through the requirements on the <a href="https://marketplace.visualstudio.com/items?itemName=donjayamanne.python#requirements" target="_blank" rel="noopener">extension’s README</a>. </p><h2 id="Next-Steps"><a href="#Next-Steps" class="headerlink" title="Next Steps"></a>Next Steps</h2><ul><li><a href="/docs/editor/extension-gallery.md">Install an Extension</a> - Python extension are available in the <a href="https://marketplace.visualstudio.com/vscode" target="_blank" rel="noopener">Marketplace</a>.</li><li><a href="/docs/editor/editingevolved.md">Editing Evolved</a> - Become a power user by mastering tips and tricks.</li></ul><h2 id="Common-Questions"><a href="#Common-Questions" class="headerlink" title="Common Questions"></a>Common Questions</h2><p><strong>Q: Why won’t linting work for me?</strong></p><p><strong>A:</strong> First make sure you have installed an extension. Next, many extensions have a dependency on an external package. Install the <a href="https://marketplace.visualstudio.com/items?itemName=donjayamanne.python#requirements" target="_blank" rel="noopener">required packages</a> using a Python package manager like <a href="https://pypi.python.org/pypi/pip" target="_blank" rel="noopener">pip</a> or <a href="http://peak.telecommunity.com/DevCenter/EasyInstall" target="_blank" rel="noopener">easy_install</a>. You can read more about troubleshooting linting issues <a href="https://github.com/DonJayamanne/pythonVSCode/wiki/Autocomplete-Intellisense" target="_blank" rel="noopener">here</a>. </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近发现 &lt;a href=&quot;https://code.visualstudio.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Visual Studio Code&lt;/a&gt; 真是巨硬的良心之作，不仅跨平台，而且十分的轻量级。虽说和 &lt;a href=&quot;https://atom.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Atom&lt;/a&gt; 很像，但毕竟微软的作品，其用户体验真心不错。&lt;/p&gt;
&lt;p&gt;如下内容的 Markdown 来自与&lt;a href=&quot;https://code.visualstudio.com/docs/languages/python&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;微软(R)的 VScode 帮助页面&lt;/a&gt;的 &lt;a href=&quot;https://github.com/Microsoft/vscode-docs/blob/master/docs/languages/python.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github 开源文件&lt;/a&gt;，其协议为知识共享协议：&lt;a href=&quot;http://creativecommons.org/licenses/by/3.0/us/legalcode&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Creative Commons Attribution 3.0 United States License&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>简单的爬虫 imgur python spider</title>
    <link href="http://www.wangdongustc.com/blog/2016/07/31/imgur-python-spider/"/>
    <id>http://www.wangdongustc.com/blog/2016/07/31/imgur-python-spider/</id>
    <published>2016-07-30T16:00:00.000Z</published>
    <updated>2016-08-01T01:28:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-imgur-com-一个随便看图的网站"><a href="#0x00-imgur-com-一个随便看图的网站" class="headerlink" title="0x00 imgur.com: 一个随便看图的网站"></a>0x00 imgur.com: 一个随便看图的网站</h2><p>imgur 上的图都是大家上传的，首先 imgur 不允许用户上传 Copyright 有问题的图，因此下载这些图应该也是合法的。但是这些图的确不是很容易批量下载，正好正在学习 python，因此打算写一个 Python 的爬虫，来抓取感兴趣的图片来下载。写好的代码在：<a href="https://github.com/wangdongustc/imgur_downloader" target="_blank" rel="noopener">wangdongustc/imgur_downloader</a></p><p>当然如果是想要引用的话，直接下载或者使用 embedded code 也是可以的。如下～ （So adorable –）</p><p><div markdown="0"><blockquote class="imgur-embed-pub" lang="en" data-id="ualSlAg"><a href="//imgur.com/ualSlAg">Dog gets prosthetic limbs</a></blockquote><script async src="//s.imgur.com/min/embed.js" charset="utf-8"></script></div><br><a id="more"></a></p><h2 id="0x01-爬虫所需的库"><a href="#0x01-爬虫所需的库" class="headerlink" title="0x01 爬虫所需的库"></a>0x01 爬虫所需的库</h2><p>首先我用的是 Python3，所用的库也就是 <a href="http://docs.python-requests.org/en/master/user/install/" target="_blank" rel="noopener">requests</a> 和 <a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/" target="_blank" rel="noopener">BeautifulSoup</a>，可以用 pip 下载：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br><span class="line">pip install beautifulsoup4</span><br></pre></td></tr></table></figure></p><h2 id="0x02-网页抓取和分析代码"><a href="#0x02-网页抓取和分析代码" class="headerlink" title="0x02 网页抓取和分析代码"></a>0x02 网页抓取和分析代码</h2><p>用法都十分的简单，比如使用 requests 加载一个网页，并用 bs4 去分析：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    user_agent = &#123;<span class="string">'User-agent'</span>: <span class="string">'Mozilla/5.0'</span>&#125;</span><br><span class="line">    response = requests.get(http_url, headers=user_agent)</span><br><span class="line">    <span class="keyword">if</span> response.status_code != <span class="number">200</span>:</span><br><span class="line">        print(<span class="string">'Page Load Error! Skipping...'</span>)</span><br><span class="line">        print()</span><br><span class="line">        <span class="keyword">return</span> set()</span><br><span class="line">    html_doc = response.text</span><br><span class="line">    soup = BeautifulSoup(html_doc, <span class="string">"html5lib"</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"Get error. Skipping...\n"</span>)</span><br><span class="line">    <span class="keyword">return</span> set()</span><br></pre></td></tr></table></figure></p><p>使用 bs4 分析网站的 a 标签，并检测分析到的连接中符合要求的网页：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">url_set = set()</span><br><span class="line">link_list = soup.find_all(<span class="string">'a'</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> link_list:</span><br><span class="line">    url_tmp = x.get(<span class="string">'href'</span>)</span><br><span class="line">    <span class="comment"># filter the urls to maintain only ones from imgur.com and have not been crawled</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'https://'</span> <span class="keyword">not</span> <span class="keyword">in</span> url_tmp <span class="keyword">and</span> <span class="string">'http://'</span> <span class="keyword">not</span> <span class="keyword">in</span> url_tmp:</span><br><span class="line">        url_tmp = <span class="string">"https://imgur.com"</span> + url_tmp</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'reddit.com'</span> <span class="keyword">in</span> url_tmp:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'https://imgur.com'</span> <span class="keyword">not</span> <span class="keyword">in</span> url_tmp:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> url_tmp <span class="keyword">in</span> history_url:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="comment"># add the filtered link to a url set</span></span><br><span class="line">    url_set.add(url_tmp)</span><br><span class="line">history_url.add(url_tmp);</span><br></pre></td></tr></table></figure></p><p>这里只保留 imgur.com 的链接，以保证爬虫在爬取过程中始终保留在 imgur.com 上。另外，如果链接已经被爬过，则排除该链接。（忽然想这样其实可以计算 imgur.com 的 pagerank，如果抓取量够得大的话。）</p><h2 id="0x03-广度优先搜索"><a href="#0x03-广度优先搜索" class="headerlink" title="0x03 广度优先搜索"></a>0x03 广度优先搜索</h2><p>其实很简单的一个搜索，每次爬完手头的链接，再继续爬下一层。可以加上多线程抓取，会快不少。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(depth &lt; <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> depth == <span class="number">-1</span>:</span><br><span class="line">        depth = <span class="number">0</span></span><br><span class="line">        url_set = CrawlPages(init_url, history_url)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        depth += <span class="number">1</span></span><br><span class="line">        result_set = set()</span><br><span class="line">        <span class="keyword">for</span> sub_url <span class="keyword">in</span> url_set:</span><br><span class="line">            print(<span class="string">"Depth:"</span>, depth)</span><br><span class="line">            result_set |= CrawlPages(sub_url, history_url)</span><br><span class="line">url_set = result_set</span><br></pre></td></tr></table></figure></p><h2 id="0x04-图片下载"><a href="#0x04-图片下载" class="headerlink" title="0x04 图片下载"></a>0x04 图片下载</h2><p>下载的话直接调用 requests 然后二进制格式写入文件就可以了。只不过 imgur.com 使用了 js 还是别的控件，导致 GET 到的 html 中并没有图片的下载链接。但其实如果知道页面的链接，下载的链接也就出来了，如下：</p><p>页面链接：<a href="https://imgur.com/r/puppies/TvnyjEc" target="_blank" rel="noopener">https://imgur.com/r/puppies/TvnyjEc</a><br>下载链接：<a href="http://imgur.com/download/TvnyjEc/" target="_blank" rel="noopener">http://imgur.com/download/TvnyjEc/</a> + 图片名称</p><p>图片直接保存成 .gif， 这样就比较不容易丢失动画信息。好吧其实我也是想抓动图来着。</p><p>图片的筛选就比较麻烦了，其实可以根据 r/ 后面的信息来筛选 topic， 也有的链接是 /topic 的链接，那在这个页面上抓取的就默认为该话题的图片啦。</p><h2 id="0x05-链接，后记"><a href="#0x05-链接，后记" class="headerlink" title="0x05 链接，后记"></a>0x05 链接，后记</h2><p>在国内就已经知道 imgur 中有比较神奇的图片的存在。 在 <a href="https://github.com/wangdongustc/imgur_downloader" target="_blank" rel="noopener">github</a> 中的链接就比较神奇，可以打开看一下。这些图一般比较大，这种爬虫在爬到第三层的时候就没有新的页面可以爬了，就停下了。</p><p><strong>不要想着搞出什么大新闻，自己知道就好！</strong><br><strong>不要想着搞出什么大新闻，自己知道就好！</strong><br><strong>不要想着搞出什么大新闻，自己知道就好！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-imgur-com-一个随便看图的网站&quot;&gt;&lt;a href=&quot;#0x00-imgur-com-一个随便看图的网站&quot; class=&quot;headerlink&quot; title=&quot;0x00 imgur.com: 一个随便看图的网站&quot;&gt;&lt;/a&gt;0x00 imgur.com: 一个随便看图的网站&lt;/h2&gt;&lt;p&gt;imgur 上的图都是大家上传的，首先 imgur 不允许用户上传 Copyright 有问题的图，因此下载这些图应该也是合法的。但是这些图的确不是很容易批量下载，正好正在学习 python，因此打算写一个 Python 的爬虫，来抓取感兴趣的图片来下载。写好的代码在：&lt;a href=&quot;https://github.com/wangdongustc/imgur_downloader&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wangdongustc/imgur_downloader&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当然如果是想要引用的话，直接下载或者使用 embedded code 也是可以的。如下～ （So adorable –）&lt;/p&gt;
&lt;p&gt;&lt;div markdown=&quot;0&quot;&gt;&lt;blockquote class=&quot;imgur-embed-pub&quot; lang=&quot;en&quot; data-id=&quot;ualSlAg&quot;&gt;&lt;a href=&quot;//imgur.com/ualSlAg&quot;&gt;Dog gets prosthetic limbs&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src=&quot;//s.imgur.com/min/embed.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在 Chromebook 上装 Linux</title>
    <link href="http://www.wangdongustc.com/blog/2016/07/31/install-linux-on-chrome-book/"/>
    <id>http://www.wangdongustc.com/blog/2016/07/31/install-linux-on-chrome-book/</id>
    <published>2016-07-30T16:00:00.000Z</published>
    <updated>2016-10-09T10:47:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-Chromebook-只能用-Google-Chrome的笔记本"><a href="#0x00-Chromebook-只能用-Google-Chrome的笔记本" class="headerlink" title="0x00 Chromebook: 只能用 Google Chrome的笔记本"></a>0x00 Chromebook: 只能用 Google Chrome的笔记本</h2><p>虽然 Chromebook 看起来便宜（？）又美观，但是其系统 Chrome OS 因为之可以用 Chrome 而被大大的限制了。虽然 16/17 年 Google 会提供 <a href="https://www.chromium.org/chromium-os/chrome-os-systems-supporting-android-apps" target="_blank" rel="noopener">Android on Chrome OS</a> 来弥补应用的短缺，但毕竟还是不能实现从内容消费到生产力角色的转换。</p><p>因此，在失去质保的前提下，有几个可以在 Chromebook 上安装 linux 的方法，包括 <a href="https://github.com/dnschneid/crouton" target="_blank" rel="noopener">Crouton</a> 和 native linux 的安装方式。Crouton 安装简便，但是不能随意选择发行版，而且各种功能（存储空间过小是大问题）受到限制，而 native linux 才能发挥出完整 linux 在 Chromebook 上的潜力。</p><p>本机型号是 Dell Chromebook 13 7310，搭载 Core i3-5005U 处理器和 4GB 内存，跑 linux 应该会很轻松的。<br><a id="more"></a></p><h2 id="0x01-解锁开发者模式"><a href="#0x01-解锁开发者模式" class="headerlink" title="0x01 解锁开发者模式"></a>0x01 解锁开发者模式</h2><p><a href="https://www.chromium.org/chromium-os/developer-information-for-chrome-os-devices/acer-c720-chromebook" target="_blank" rel="noopener">Chromium 网站</a>上有如何将 Chromebook 切换到 developer mode:</p><p><cite>To invoke Recovery mode, you hold down the <em>ESC</em> and <em>Refresh (F3)</em> keys and poke the Power button.</cite></p><p>To enter Dev-mode you first invoke Recovery, and at the Recovery screen press <em>Ctrl-D</em> (there’s no prompt - you have to know to do it). It will ask you to confirm, then reboot into dev-mode.</p><p>就是按住 ESC 和 刷新键 (F2) 后按开关启动，就可以进入一个警告界面。等待30s或者按 Ctrl-D 即可继续开机。</p><h2 id="0x02-修复盘制作"><a href="#0x02-修复盘制作" class="headerlink" title="0x02 修复盘制作"></a>0x02 修复盘制作</h2><p>参考 <a href="https://support.google.com/chromebook/answer/1080595?hl=en" target="_blank" rel="noopener">Chrome OS</a> 官方的帮助文档，方法为：</p><p><cite></cite></p><ol><li><p>On the working computer (not the Chromebook with the error), <a href="https://chrome.google.com/webstore/detail/chromebook-recovery-utili/jndclpdbaamdhonoechobihbbiimdgai" target="_blank" rel="noopener">install the recovery app</a></p></li><li><p>Open the app and follow the on-screen instructions to create the recovery media.</p></li><li><p>Open the Chromebook you want to recover.</p></li><li><p>f you have anything connected to this Chromebook (such as a mouse, SD card, or external hard drive), remove it.</p></li><li><p>Enter recovery mode:</p><p> If you have a Chromebook with a keyboard, press and hold Esc + Refresh Refresh, then press Power Power. Let go of Power, then let go of the other keys.<br> If you have a Chromebox or Chromebit, turn it off, press its recovery button, then press the Power button to turn it back on. To find the location of the recovery button, see the user manual.</p></li><li><p>You’ll see one of these messages:</p><p> “Chrome OS is missing or damaged. Please insert a recovery USB stick or SD card.”<br> “Please insert a recovery USB stick or SD card.”</p></li><li><p>Insert the recovery media you’ve created (SD card or USB drive).</p></li><li><p>Follow the on-screen instructions.<br></p></li></ol><p>其实就是下载那个App，然后创建一个SD卡就可以了用来恢复 ChromeOS了。</p><h2 id="0x03-开启-SeaBIOS"><a href="#0x03-开启-SeaBIOS" class="headerlink" title="0x03 开启 SeaBIOS"></a>0x03 开启 SeaBIOS</h2><p>参考 Arch Linux 的安装指南，如何在 <a href="https://wiki.archlinux.org/index.php/Chrome_OS_devices" target="_blank" rel="noopener">Chromebook 上安装</a>。内容十分详细。<br>在 Dell 7310 上，安装 SeaBIOS 的方法是<a href="https://github.com/Kerryliu/Native-Linux-on-Dell-Chromebook-13/wiki/Enabling-Legacy-Boot" target="_blank" rel="noopener">参考</a>：</p><ol><li>脚本<br>这些代码的运行方法为，在 Chrome 界面按 Ctrl+Alt+t 调出 terminal, 打 shell 进入 bash 后操作。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span>;</span><br><span class="line">rm -f flash_chromebook_rom.sh; </span><br><span class="line">curl -k -L -O https://johnlewis.ie/flash_chromebook_rom.sh; </span><br><span class="line">sudo -E bash flash_chromebook_rom.sh</span><br></pre></td></tr></table></figure><ol start="2"><li>命令<br>运行完脚本之后，以 root 身份输入：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crossystem dev_boot_usb=1 dev_boot_legacy=1</span><br></pre></td></tr></table></figure><p>来启用USB启动。</p><p>安装了之后，系统就可以在开机启动U盘了。开机启动时候，按 Ctrl+L 即可进入启动菜单选项。</p><h2 id="0x04-USB-启动介质制作"><a href="#0x04-USB-启动介质制作" class="headerlink" title="0x04 USB 启动介质制作"></a>0x04 USB 启动介质制作</h2><p>测试发现 opensuse Tumbleweed 安装会有问题，Ubuntu Mate 和 普通 desktop 也没有成功。最后用 Fedora 24 十分完美的安装成功了。</p><ol><li><p>首先是 Fedora 下载，Workstation 版<a href="https://getfedora.org/" target="_blank" rel="noopener">由此下载</a>。</p></li><li><p>U盘启动制作器，可用的有很多，比如 <a href="http://www.majorgeeks.com/files/details/imageusb.html" target="_blank" rel="noopener">ImageUSB</a></p></li><li><p>按照步骤，在另一台电脑上制作启动U盘，记得校验是否成功。</p></li></ol><p>制作完毕后，这个U盘就可以用来给普通电脑安装 Fedora 了。</p><h2 id="0x05-安装！"><a href="#0x05-安装！" class="headerlink" title="0x05 安装！"></a>0x05 安装！</h2><p>给 Chromebook 插上制作好的U盘，按开机启动。然后：</p><p>在30s之内按下 Ctrl-l， 进入 SeaBIOS。接着按提示按下 ESC，选择 USB blablabla…</p><p>之后就进入和在正常电脑上一样的安装过程，按提示进行即可。需要注意的是在选择磁盘的时候，可以把所有的分区都擦掉，把为数不多的16G全部留给 Fedora。我分配的是 500M boot + 1.5G swap + 13.5G ext4 /。使用过程中交换空间还是使用了一部分的，相比与我的11年 Lenovo 老大哥, 直观上还是略逊一筹的。</p><h2 id="0x06-后记"><a href="#0x06-后记" class="headerlink" title="0x06 后记"></a>0x06 后记</h2><p>至此，Fedora Linux 已经安装在 Chromebook 上了。但是每次开机都必须在30s内按 Ctrl-l 然后 ESC 才会进入 Grub，否则会出现 “Chrome OS 损坏”之类的字样。Google 对 bootloader 的封装还是十分严密的。如果要直接启动 Fedora，就要拆机后拆除<em>写保护螺钉</em>。总之安装 linux 有风险，但是安装好之后的感觉，比 Chrome OS 不知道高到哪里去了。</p><p><img src="/blog/img/install-linux-on-chrome-book/Screenshot.png" alt="桌面截图"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-Chromebook-只能用-Google-Chrome的笔记本&quot;&gt;&lt;a href=&quot;#0x00-Chromebook-只能用-Google-Chrome的笔记本&quot; class=&quot;headerlink&quot; title=&quot;0x00 Chromebook: 只能用 Google Chrome的笔记本&quot;&gt;&lt;/a&gt;0x00 Chromebook: 只能用 Google Chrome的笔记本&lt;/h2&gt;&lt;p&gt;虽然 Chromebook 看起来便宜（？）又美观，但是其系统 Chrome OS 因为之可以用 Chrome 而被大大的限制了。虽然 16/17 年 Google 会提供 &lt;a href=&quot;https://www.chromium.org/chromium-os/chrome-os-systems-supporting-android-apps&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android on Chrome OS&lt;/a&gt; 来弥补应用的短缺，但毕竟还是不能实现从内容消费到生产力角色的转换。&lt;/p&gt;
&lt;p&gt;因此，在失去质保的前提下，有几个可以在 Chromebook 上安装 linux 的方法，包括 &lt;a href=&quot;https://github.com/dnschneid/crouton&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Crouton&lt;/a&gt; 和 native linux 的安装方式。Crouton 安装简便，但是不能随意选择发行版，而且各种功能（存储空间过小是大问题）受到限制，而 native linux 才能发挥出完整 linux 在 Chromebook 上的潜力。&lt;/p&gt;
&lt;p&gt;本机型号是 Dell Chromebook 13 7310，搭载 Core i3-5005U 处理器和 4GB 内存，跑 linux 应该会很轻松的。&lt;br&gt;
    
    </summary>
    
    
      <category term="chromebook" scheme="http://www.wangdongustc.com/blog/tags/chromebook/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.wangdongustc.com/blog/2015/01/01/hello-world/"/>
    <id>http://www.wangdongustc.com/blog/2015/01/01/hello-world/</id>
    <published>2014-12-31T16:00:00.000Z</published>
    <updated>2016-08-01T01:17:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>原来已经有了一个“Hello World”了。</p><h2 id="在这里写一些-Markdown-使用过程中的小技巧"><a href="#在这里写一些-Markdown-使用过程中的小技巧" class="headerlink" title="在这里写一些 Markdown 使用过程中的小技巧"></a>在这里写一些 Markdown 使用过程中的小技巧</h2><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片要是显示不了……</span>](<span class="link">/blog/img/qq.png</span>)</span><br></pre></td></tr></table></figure><h3 id="插入-More-标签"><a href="#插入-More-标签" class="headerlink" title="插入 More 标签"></a>插入 More 标签</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure><h3 id="插入-Html-代码"><a href="#插入-Html-代码" class="headerlink" title="插入 Html 代码"></a>插入 Html 代码</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div markdown = "0"&gt;</span><br><span class="line"><span class="code">    &lt;blockquote class="imgur-embed-pub" lang="en" data-id="ualSlAg"&gt;</span></span><br><span class="line"><span class="code">        &lt;a href="//imgur.com/ualSlAg"&gt;Dog gets prosthetic limbs&lt;/a&gt;</span></span><br><span class="line"><span class="code">    &lt;/blockquote&gt;</span></span><br><span class="line"><span class="code">    &lt;script async src="//s.imgur.com/min/embed.js" charset="utf-8"&gt;&lt;/script&gt;</span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="插入代码"><a href="#插入代码" class="headerlink" title="插入代码"></a>插入代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello World!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文字样式"><a href="#文字样式" class="headerlink" title="文字样式"></a>文字样式</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*那只身手敏捷的狐狸跳过那只懒狗*</span></span><br><span class="line"><span class="strong">**那只身手敏捷的狐狸跳过那只懒狗**</span></span><br><span class="line"><span class="strong">***那只身手敏捷的狐狸跳过那只懒狗**</span>*</span><br></pre></td></tr></table></figure><p><em>那只身手敏捷的狐狸跳过那只懒狗</em><br><strong>那只身手敏捷的狐狸跳过那只懒狗</strong><br><strong><em>那只身手敏捷的狐狸跳过那只懒狗</em></strong></p><h2 id="测试哈哈哈"><a href="#测试哈哈哈" class="headerlink" title="测试哈哈哈"></a>测试哈哈哈</h2><p><img src="/img/test.jpg" alt="图片要是显示不了……"><br>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><p>下面的内容是本来就有的…</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原来已经有了一个“Hello World”了。&lt;/p&gt;
&lt;h2 id=&quot;在这里写一些-Markdown-使用过程中的小技巧&quot;&gt;&lt;a href=&quot;#在这里写一些-Markdown-使用过程中的小技巧&quot; class=&quot;headerlink&quot; title=&quot;在这里写一些 Markdown 使用过程中的小技巧&quot;&gt;&lt;/a&gt;在这里写一些 Markdown 使用过程中的小技巧&lt;/h2&gt;&lt;h3 id=&quot;插入图片&quot;&gt;&lt;a href=&quot;#插入图片&quot; class=&quot;headerlink&quot; title=&quot;插入图片&quot;&gt;&lt;/a&gt;插入图片&lt;/h3&gt;&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;![&lt;span class=&quot;string&quot;&gt;图片要是显示不了……&lt;/span&gt;](&lt;span class=&quot;link&quot;&gt;/blog/img/qq.png&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;插入-More-标签&quot;&gt;&lt;a href=&quot;#插入-More-标签&quot; class=&quot;headerlink&quot; title=&quot;插入 More 标签&quot;&gt;&lt;/a&gt;插入 More 标签&lt;/h3&gt;&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!-- more --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;插入-Html-代码&quot;&gt;&lt;a href=&quot;#插入-Html-代码&quot; class=&quot;headerlink&quot; title=&quot;插入 Html 代码&quot;&gt;&lt;/a&gt;插入 Html 代码&lt;/h3&gt;&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div markdown = &quot;0&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;    &amp;lt;blockquote class=&quot;imgur-embed-pub&quot; lang=&quot;en&quot; data-id=&quot;ualSlAg&quot;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;        &amp;lt;a href=&quot;//imgur.com/ualSlAg&quot;&amp;gt;Dog gets prosthetic limbs&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;    &amp;lt;/blockquote&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;code&quot;&gt;    &amp;lt;script async src=&quot;//s.imgur.com/min/embed.js&quot; charset=&quot;utf-8&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;插入代码&quot;&gt;&lt;a href=&quot;#插入代码&quot; class=&quot;headerlink&quot; title=&quot;插入代码&quot;&gt;&lt;/a&gt;插入代码&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;cout&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&quot;built_in&quot;&gt;endl&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;文字样式&quot;&gt;&lt;a href=&quot;#文字样式&quot; class=&quot;headerlink&quot; title=&quot;文字样式&quot;&gt;&lt;/a&gt;文字样式&lt;/h3&gt;&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;emphasis&quot;&gt;*那只身手敏捷的狐狸跳过那只懒狗*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;strong&quot;&gt;**那只身手敏捷的狐狸跳过那只懒狗**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;strong&quot;&gt;***那只身手敏捷的狐狸跳过那只懒狗**&lt;/span&gt;*&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;那只身手敏捷的狐狸跳过那只懒狗&lt;/em&gt;&lt;br&gt;&lt;strong&gt;那只身手敏捷的狐狸跳过那只懒狗&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;&lt;em&gt;那只身手敏捷的狐狸跳过那只懒狗&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;测试哈哈哈&quot;&gt;&lt;a href=&quot;#测试哈哈哈&quot; class=&quot;headerlink&quot; title=&quot;测试哈哈哈&quot;&gt;&lt;/a&gt;测试哈哈哈&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/img/test.jpg&quot; alt=&quot;图片要是显示不了……&quot;&gt;&lt;br&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
